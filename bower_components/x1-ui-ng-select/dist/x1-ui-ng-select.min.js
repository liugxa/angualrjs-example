angular.module("x1.ui.select",["pascalprecht.translate","ui.bootstrap.dropdown","x1.ui.utils"]);
angular.module("x1.ui.select").constant("x1.ui.select.constant",{EVENTS:{SELECT_ITEM:"x1.ui.select.select-item",CHANGE_SELECTED_ITEMS:"x1.ui.select.change-selected-items",OUTSIDE_CLICK:"x1.ui.select.outside-click"},type:{TREE:"tree",SINGLE:"single"}});
angular.module("x1.ui.select").directive("x1Select",["$document","$timeout","x1.ui.select.constant","x1Utils",function($document,$timeout,SelectConstant,x1Utils){"use strict";return{restrict:"E",transclude:!0,require:"ngModel",scope:{selectOptions:"=",placeholder:"@?",size:"@?",theme:"@?",changeFn:"&?",config:"=?"},templateUrl:function(elem,attr){return"tree"===attr.type?"select/tree-view/tree-view.html":"select/select.html"},link:function($scope,element,attrs,ngModel){function initIconUrls(allOptions){allOptions=allOptions||[];for(var i=0;i<allOptions.length;i++)addBackgroundImage(allOptions[i]),allOptions[i].groups&&initIconUrls(allOptions[i].groups)}function canAddToSelectedOptions(){return!$scope.config||!$scope.config.maximumSelected||$scope.selectedOptions.length<$scope.config.maximumSelected}function addBackgroundImage(element){element&&element.iconUrl&&(element.iconStyle={"background-image":"url("+element.iconUrl+")"})}function handleClick(event){element===event.target||element[0].contains(event.target)||(document.removeEventListener("click",handleClick,!0),removeOverlapLogic())}function setOverlapLogic(){listOptionsElement=element[0].querySelector(".dropdown-menu"),listOptionsElement.style.position="fixed",scrollContainers=getOverflowedParents(element[0]),setInitialPosition(),toggleHandlers("addEventListener"),isOverlapActive=!0}function getOverflowedParents(element){function searchOverflowedElements(element){var computedStyles=getComputedStyle(element),exist=properties.some(function(item){if(values.indexOf(computedStyles[item])>-1)return!0});exist&&result.push(element),null!==element.parentElement&&searchOverflowedElements(element.parentElement)}var parent=element.parentElement,properties=["overflowX","overflowY"],values=["auto","scroll"],result=[];return searchOverflowedElements(parent),result}function setInitialPosition(){var selectCoords,parent,parentCoords,overLeft,overRight,overTop,overBottom,scroll,i;for(i=0;i<scrollContainers.length;i++)selectCoords=selectElement.getBoundingClientRect(),parent=scrollContainers[i],parentCoords=parent.getBoundingClientRect(),scroll=getScrollBarDimensions(parent),overLeft=parentCoords.left-selectCoords.left,overRight=selectCoords.right-parentCoords.right+scroll.horizontalScroll,overTop=parentCoords.top-selectCoords.top,overBottom=selectCoords.bottom-parentCoords.bottom+scroll.verticalScroll,overLeft>0?parent.scrollLeft-=overLeft:overRight>0&&(parent.scrollLeft+=overRight),overTop>0?parent.scrollTop-=overTop:overBottom>0&&(parent.scrollTop+=overBottom);setStyles()}function getScrollBarDimensions(element){var elementStyles=getComputedStyle(element),borderLeftRightWidth=parseFloat(elementStyles.borderLeftWidth)+parseFloat(elementStyles.borderRightWidth),borderTopBottomWidth=parseFloat(elementStyles.borderTopWidth)+parseFloat(elementStyles.borderBottomWidth);return{horizontalScroll:element.offsetWidth-element.clientWidth-borderLeftRightWidth,verticalScroll:element.offsetHeight-element.clientHeight-borderTopBottomWidth}}function setStyles(reset){var selectCoords,maxHeight;reset?listOptionsElement.style.width=listOptionsElement.style.left=listOptionsElement.style.top="":(selectCoords=selectElement.getBoundingClientRect(),listOptionsElement.style.width=selectCoords.width+"px",listOptionsElement.style.left=selectCoords.left+"px",listOptionsElement.style.top=selectCoords.top+selectCoords.height+"px",maxHeight=window.innerHeight-(selectCoords.top+selectCoords.height),listOptionsElement.style.height="",maxHeight<listOptionsElement.clientHeight&&(listOptionsElement.style.height=maxHeight+"px"))}function toggleHandlers(toggle){var i;if(scrollContainers.length)for(i=0;i<scrollContainers.length;i++)scrollContainers[i][toggle]("scroll",setPosition);window[toggle]("scroll",setPosition),window[toggle]("resize",setPosition)}function setPosition(event){var containerCoords,isOverEdge,scroll,selectElementCoords=selectElement.getBoundingClientRect();return event.currentTarget!==window&&(containerCoords=event.currentTarget.getBoundingClientRect(),scroll=getScrollBarDimensions(event.currentTarget),isOverEdge=selectElementCoords.top+selectElementCoords.height<containerCoords.top||selectElementCoords.bottom>containerCoords.bottom-scroll.verticalScroll||selectElementCoords.left<containerCoords.left||selectElementCoords.right>containerCoords.right-scroll.horizontalScroll)?(selectElement.parentElement.click(),setStyles(!0),toggleHandlers("removeEventListener"),void(isOverlapActive=!1)):void setStyles()}function removeOverlapLogic(){isOverlapped&&isOverlapActive&&(toggleHandlers("removeEventListener"),isOverlapActive=!1)}function setOverflow(){var overflowParent=findOverflowParent(element[0]),list=element[0].querySelectorAll(".main-control")[0];if(list){var listRect=list.getBoundingClientRect(),overflowParentRect=overflowParent.getBoundingClientRect(),defaultMargin=10,scrollHeight=overflowParentRect.bottom-listRect.bottom;element[0].classList.add("list-overflow"),$timeout(function(){var list=element[0].querySelectorAll(".list-options")[0],option=list.querySelectorAll(".list-option")[0],optionHeight=option.clientHeight,listHeight=list.clientHeight,expandAtTop=scrollHeight<2*optionHeight+defaultMargin;expandAtTop&&(scrollHeight=listRect.top-overflowParentRect.top),listHeight>scrollHeight&&(list.style.overflow="auto",list.style.height=Math.max(optionHeight,scrollHeight-defaultMargin)+"px"),expandAtTop&&(list.style.top=-list.offsetHeight+"px"),element[0].classList.remove("list-overflow"),$scope.orientationClass=expandAtTop?"orientation-at-top":""},0,!0)}}function deactivateSingleOptions(){$scope.selectedOptions=$scope.selectedOptions.filter(function(element){return!element.single})}function deactivateAllOptionsExcept(option){$scope.selectedOptions=$scope.selectedOptions.filter(function(element){return element!==option})}function activateOptions(options){if($scope.selectOptions)return $scope.selectOptions.filter(function(element){if(options.indexOf(element.id)>-1)return element})}function callChangeFunction(selectionOption){"function"==typeof $scope.changeFn&&$scope.changeFn({value:selectionOption})}function activateTreeOptions(allOptions,selectedId){var element,found;allOptions=allOptions||[];for(var i=0;i<allOptions.length;i++)if(element=allOptions[i],element.groups){if(element.groups&&(found=activateTreeOptions(element.groups,selectedId)))return found}else if(element.id===selectedId)return previousSelectedItem=element,element}function keyDownHandler(event){function optionsSearch(){for(;i<len;i++){var itemName=topLevelListOptions[i].name.toUpperCase();if(itemName.charAt(0)===ch){index=i;break}i===len-1&&key===ch&&index>-1&&(i=-1,len=index+1)}}if("keydown"===event.type){var len,i,ch=String.fromCharCode(event.keyCode||event.which);if(/^[A-Za-z]$/.test(ch)===!1)return key=null,void(index=-1);topLevelListOptions=$scope.selectOptions,ch=ch.toUpperCase(),len=topLevelListOptions.length,index>-1&&key===ch?(i=index+1,i===len&&(i=0)):(index=-1,i=0),optionsSearch(),key=ch,index>-1&&showAssociatedMenu(index)}}function showAssociatedMenu(index){if(attrs.type===SelectConstant.type.TREE){var el;el=element[0].querySelectorAll(".btn-group > .dropdown-menu > .list-option")[index],handleOpenMenu(el),handleOpenSubMenu(el),closePreviousMenu(el);var item=topLevelListOptions[index];$scope.$emit(SelectConstant.EVENTS.SELECT_ITEM,item,topLevelListOptions),$scope.$apply(function(){item.groups&&(item.openItems=!item.openItems)})}else attrs.type===SelectConstant.type.SINGLE&&$scope.selectToggle(topLevelListOptions[index],!0)}function handleLazyRender(item,siblings){siblings.forEach(function(sibling){sibling!==item&&sibling.groups&&(sibling.openItems=!1,handleLazyRender(item,sibling.groups))})}function outsideMenuClickHandler(evt){index=-1,key=null;var menuItem=element[0].getElementsByClassName(rootTreeNode)[0];menuItem&&(element[0].contains(evt.target)&&!menuItem.contains(evt.target)||($scope.$broadcast(SelectConstant.EVENTS.OUTSIDE_CLICK),menuItem.className=menuItem.className.replace(treeItemOpen,""),$scope.$evalAsync(function(){$scope.treeSelectOpen=!1})))}function correctPosition(el){var scrollableElementDimensions,scrollableElement,rightAvailableSpace,leftAvailableSpace,elDimensions,borders,subMenuRight,subMenu=el.children[2];subMenu&&(subMenu.style.left="",subMenuRight=subMenu.getBoundingClientRect().right,elDimensions=el.getBoundingClientRect(),scrollableElement=getOverflowedParents(element[0])[0],scrollableElement?(scrollableElementDimensions=scrollableElement.getBoundingClientRect(),borders={left:scrollableElementDimensions.left,right:scrollableElementDimensions.right}):borders={left:0,right:window.innerWidth},borders.right<subMenuRight+40&&(rightAvailableSpace=borders.right-elDimensions.right,leftAvailableSpace=elDimensions.left-borders.left,leftAvailableSpace<rightAvailableSpace?subMenu.style.width=rightAvailableSpace-20+"px":(subMenu.style.left=borders.left-elDimensions.left+"px",subMenu.style.width=-borders.left+elDimensions.left+"px")),subMenu.style.visibility="visible")}function toggleClass(el,className){el.className.search(className)>-1?el.className=el.className.replace(className,""):el.className+=" "+className}function handleOpenMenu(el){el.className.search(rootTreeNode)>-1&&(toggleClass(el,treeItemOpen),$scope.$evalAsync(function(){$scope.treeSelectOpen=!$scope.treeSelectOpen,handleLazyRender(null,$scope.selectOptions)}))}function handleOpenSubMenu(el){el.className.search(subMenu)>-1&&(el.children[2]&&(el.children[2].style.visibility="hidden"),toggleClass(el,treeItemOpen),$timeout(function(){correctPosition(el)},0,!1))}function closePreviousMenu(el){if(el){var list=Array.prototype.slice.apply(element[0].getElementsByClassName(listOption));list.forEach(function(item){item.contains(el)||(item.className=item.className.replace(treeItemOpen,""))})}}function treeEventsHandler(evt){for(var el=evt.target;el.className&&el.className.search("not-clickable")>-1;)el=el.parentNode||el.parentElement;handleOpenMenu(el),handleOpenSubMenu(el),closePreviousMenu(el)}function findOverflowParent(element){var foundElement;do foundElement="auto"===window.getComputedStyle(element).overflow,foundElement||(element=element.parentElement),foundElement=foundElement||element===window.document.body;while(!foundElement);return element}var previousSelectedItem,listOptionsElement,scrollContainers,isOverlapped,isOverlapActive,selectElement=element[0].querySelector(".dropdown");if(ngModel){$scope.selectedOptions=$scope.selectedOptions||[],$scope.size=$scope.size||"medium",$scope.theme=$scope.theme||"default",$scope.treeStateHelper={},$scope.selectedOption=null,$scope.orderByParam=$scope.config&&$scope.config.orderBy?$scope.config.orderBy:"$index",$scope.singleSelect=attrs.type===SelectConstant.type.SINGLE,isOverlapped=$scope.config&&$scope.config.overlap&&attrs.type!==SelectConstant.type.TREE,initIconUrls($scope.selectOptions),ngModel.$render=function(){var selected=ngModel.$viewValue;$scope.treeSelectedItem=ngModel.$viewValue,selected&&Array.isArray(selected)&&selected.length>0?(selected=selected.map(function(element){return element.id}),$scope.selectedOptions=activateOptions(selected)):selected&&!Array.isArray(selected)&&(attrs.type===SelectConstant.type.TREE?$scope.selectedItem=activateTreeOptions($scope.selectOptions,selected.id):$scope.selectedOption=activateOptions([selected.id])[0]),ngModel.$viewValue||($scope.selectedOption=null,$scope.selectedOptions.length=0)},$scope.canShowInstructionText=function(){var showInstructionTextListSize=1;return!!(x1Utils.isDefined($scope,"config.instructionTextAdded")&&(x1Utils.isDefined($scope,"config.maximumSelected")&&(showInstructionTextListSize=$scope.config.maximumSelected),$scope.selectOptions.length>=showInstructionTextListSize))},$scope.isItemSelected=function(selectedItem){return $scope.selectedOptions.length?$scope.selectedOptions.some(function(item){return selectedItem.id===item.id}):$scope.selectedOption&&selectedItem.id===$scope.selectedOption.id},$scope.selectToggle=function(option){$scope.isItemSelected(option)?attrs.type===SelectConstant.type.SINGLE?removeOverlapLogic():$scope.deselect(option):option.single||$scope.singleSelect?($scope.selectedOption=option,$scope.selectedOptions=[],deactivateAllOptionsExcept(option),removeOverlapLogic(),ngModel.$setViewValue($scope.selectedOption),callChangeFunction($scope.selectedOption)):(canAddToSelectedOptions()&&($scope.selectedOptions.push(option),$scope.selectedOption=null),deactivateSingleOptions(),ngModel.$setViewValue($scope.selectedOptions),callChangeFunction($scope.selectedOptions))},$scope.toggleOptionsList=function(open){attrs.disabled||(open?(document.addEventListener("click",handleClick,!0),$scope.config&&"auto"===$scope.config.overflow&&setOverflow(),isOverlapped&&setOverlapLogic()):(document.removeEventListener("click",handleClick,!0),removeOverlapLogic()))},$scope.deselect=function(option){if(option.single||$scope.singleSelect)$scope.selectedOption=null,ngModel.$setViewValue($scope.selectedOption),callChangeFunction($scope.selectedOption);else if(!x1Utils.isDefined($scope,"config.minimumSelected")||x1Utils.isDefined($scope,"config.minimumSelected")&&$scope.selectedOptions.length>$scope.config.minimumSelected){$scope.selectedOption=null;var index=$scope.selectedOptions.indexOf(option);index!==-1&&$scope.selectedOptions.splice(index,1),ngModel.$setViewValue($scope.selectedOptions),callChangeFunction($scope.selectedOptions)}},$scope.accessibleDeselect=function($event,option){$event&&13===$event.keyCode?$scope.deselect(option):$event&&27===$event.keyCode&&$scope.deselect(option)};var topLevelListOptions,type=$scope.config&&$scope.config.actionType||"click",treeItemOpen="item-opened",subMenu="sub-menu",rootTreeNode="x1-select-tree",listOption="list-option",key=null,index=-1,handleKeyDown=$scope.config&&$scope.config.handleKeyDown;$scope.isTreeHoverAction=$scope.config&&"hover"===$scope.config.actionType,$scope.$on(SelectConstant.EVENTS.SELECT_ITEM,function(evt,item,siblings){item.groups||(previousSelectedItem&&(previousSelectedItem.selected=!1,previousSelectedItem.sgow=!1),item.selected=!item.selected,$scope.selectedItem=item,$scope.$broadcast(SelectConstant.EVENTS.CHANGE_SELECTED_ITEMS,item),ngModel.$setViewValue($scope.selectedItem),outsideMenuClickHandler({}),previousSelectedItem=item),item.opened=!!item.groups&&!item.opened,handleLazyRender(item,siblings)}),$timeout(function(){attrs.type!==SelectConstant.type.TREE||$scope.isTreeHoverAction||(element[0].addEventListener(type,treeEventsHandler,!0),window.document.addEventListener("click",outsideMenuClickHandler),handleKeyDown&&attrs.type===SelectConstant.type.TREE&&!$scope.isTreeHoverAction&&element[0].addEventListener("keydown",keyDownHandler,!1)),handleKeyDown&&!$scope.isTreeHoverAction&&element[0].addEventListener("keydown",keyDownHandler,!1)},0,!1),$scope.$on("$destroy",function(){element[0].removeEventListener(type,treeEventsHandler),window.document.removeEventListener("click",outsideMenuClickHandler),removeOverlapLogic()})}}}}]);
angular.module("x1.ui.select").directive("x1SelectTree",["RecursionHelper","x1.ui.select.constant",function(RecursionHelper,SelectConstant){"use strict";return{restrict:"E",replace:!0,templateUrl:"select/tree-view/tree-view-node.html",scope:{items:"=",config:"=",parentItem:"=",stateHelper:"=",selectedItems:"="},controller:function($scope){function closeAllOpenItems(){$scope.items.forEach(function(item){item.openItems=!1})}$scope.selectItem=function(item,$event){item.groups&&!$scope.stateHelper.selectedParent?($event.preventDefault(),$event.stopPropagation(),closeAllOpenItems(),item.openItems=!item.openItems):($scope.$emit(SelectConstant.EVENTS.SELECT_ITEM,item,$scope.items),$scope.parentItem&&($scope.stateHelper.selectedParent=!0)),item.groups&&!$scope.parentItem&&($scope.stateHelper.selectedParent=!1)},$scope.$on(SelectConstant.EVENTS.CHANGE_SELECTED_ITEMS,function(evt,data){$scope.selectedItems=data}),$scope.$on(SelectConstant.EVENTS.OUTSIDE_CLICK,function(){closeAllOpenItems()}),$scope.isItemSelected=function(selectedItem){return!selectedItem.groups&&$scope.selectedItems&&$scope.selectedItems.id===selectedItem.id}},compile:function(element){return RecursionHelper.compile(element)}}}]);
angular.module("x1.ui.select").factory("RecursionHelper",["$compile",function($compile){"use strict";return{compile:function(element,link){angular.isFunction(link)&&(link={post:link});var compiledContents,contents=element.contents().remove();return{pre:link&&link.pre?link.pre:null,post:function(scope,element){compiledContents||(compiledContents=$compile(contents)),compiledContents(scope,function(clone){element.append(clone)}),link&&link.post&&link.post.apply(null,arguments)}}}}}]);
!function(module){try{module=angular.module("x1.ui.select")}catch(e){module=angular.module("x1.ui.select",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("select/select.html",'<div class="x1-select" ng-class="{\'x1-select-sm\': size===\'small\', \'x1-select-lg\': size===\'large\'}"><ul ng-if="!(selectedOption.single || singleSelect) && (config && config.displayMultiSelectListOnTop)" class="selected-list list-unstyled"><li ng-repeat="selectedOption in selectedOptions track by $index" class="list-option"><span ng-if="selectedOption.icon" class="option-icon glyphicon glyphicon-{{selectedOption.icon}} pull-left"></span> <span ng-if="!selectedOption.icon && selectedOption.iconStyle" class="url-icon pull-left" ng-style="selectedOption.iconStyle"></span> <span class="selected-label">{{selectedOption.name}}</span> <a ng-hide="selectedOptions.length===1" href="" class="close glyphicon glyphicon-xs glyphicon-remove" ng-click="deselect(selectedOption)" ng-keydown="accessibleDeselect($event, selectedOption)" title="{{\'x1UiNgSelect.ARIA.deselect\' | translate}}"><span class="sr-only" translate="x1UiNgSelect.ARIA.deselect"></span></a></li></ul><div role="combobox" class="btn-group" dropdown="" on-toggle="toggleOptionsList(open)" ng-class="{\'btn-group-sm\': size===\'small\', \'btn-group-lg\': size===\'large\'}"><button role="button" type="button" class="btn dropdown-toggle" dropdown-toggle="" ng-class="{\'btn-default\': theme===\'default\', \'btn-secondary\': theme===\'primary\', \'has-help-block\': canShowInstructionText()}"><span ng-if="config.checkArrowsAdded" class="select-placeholder pull-left">{{selectedOptions.length}} {{\'x1UiNgSelect.SELECTED\' | translate}}</span> <em ng-if="!selectedOption" ng-hide="config.checkArrowsAdded" class="select-placeholder pull-left">{{placeholder}}</em> <span ng-if="selectedOption" class="list-option pull-left"><span ng-if="selectedOption.icon" class="option-icon glyphicon glyphicon-{{selectedOption.icon}} pull-left"></span> <span ng-if="!selectedOption.icon && selectedOption.iconStyle" class="url-icon pull-left" ng-style="selectedOption.iconStyle"></span> <span>{{selectedOption.name}}</span></span></button><ul role="listbox" class="dropdown-menu {{orientationClass}}"><li ng-repeat="option in selectOptions | orderBy: orderByParam track by $index" role="option" class="list-option {{option.divider}}" ng-class="{\'active\': isItemSelected(option)}" ng-click="selectToggle(option)" aria-label="{{\'x1UiNgSelect.ARIA.listbox\' | translate}}"><a href=""><div ng-if="config && config.checkArrowsAdded && !option.instructionText" class="checkbox pull-left"><label for="{{option.id}}"><input type="checkbox" ng-checked="isItemSelected(option)" value="{{option.displayName || option.name}}" id="{{option.id}}"> <span></span> <span class="sr-only">{{option.displayName || option.name}}</span></label></div><span ng-if="option.icon" class="option-icon glyphicon glyphicon-{{option.icon}} pull-left"></span> <span ng-if="!option.icon && option.iconStyle" class="url-icon pull-left" ng-style="option.iconStyle"></span> <span ng-if="!option.instructionText" class="option-text" title="{{option.displayName || option.name}}">{{option.displayName || option.name}}</span></a></li></ul><span ng-if="canShowInstructionText()" class="help-block">{{config.instructionTextAdded | translate}}</span></div><ul ng-if="!(selectedOption.single || singleSelect) && !(config && config.displayMultiSelectListOnTop)" class="selected-list list-unstyled"><li ng-repeat="selectedOption in selectedOptions track by $index" class="list-option"><span ng-if="selectedOption.icon" class="option-icon glyphicon glyphicon-{{selectedOption.icon}} pull-left"></span> <span ng-if="!selectedOption.icon && selectedOption.iconStyle" class="url-icon pull-left" ng-style="selectedOption.iconStyle"></span> <span class="selected-label">{{selectedOption.displayName || selectedOption.name}}</span> <a href="" class="close glyphicon glyphicon-xs glyphicon-remove" ng-click="deselect(selectedOption)" ng-keydown="accessibleDeselect($event, selectedOption)" title="{{\'x1UiNgSelect.ARIA.deselect\' | translate}}"><span class="sr-only" translate="x1UiNgSelect.ARIA.deselect"></span></a></li></ul></div>')}])}();
!function(module){try{module=angular.module("x1.ui.select")}catch(e){module=angular.module("x1.ui.select",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("select/tree-view/tree-view-node.html",'<ul role="listbox" class="dropdown-menu"><li ng-repeat="item in items track by $index" role="option" class="list-option clearfix" ng-class="{\'active\': isItemSelected(item), \'opened\': item.openItems}" ng-click="selectItem(item, $event)" aria-label="{{\'x1UiNgSelect.ARIA.listbox\' | translate}}"><a href="" class="clearfix subnav-link"><span ng-if="item.groups" class="dropdown pull-right" dropdown="" ng-class="{\'open\': item.openItems}"><span class="glyphicon glyphicon-xs glyphicon-chevron-right subnav-link"></span><x1-select-tree ng-if="item.groups && ((config.lazyRender && item.openItems) || !config.lazyRender)" state-helper="stateHelper" selected-items="selectedItems" items="item.groups" parent-item="item" config="config"></x1-select-tree></span> <span class="pull-left item-name" title="{{::(item.displayName || item.name)}}">{{::(item.displayName || item.name)}}</span></a></li></ul>')}])}();
!function(module){try{module=angular.module("x1.ui.select")}catch(e){module=angular.module("x1.ui.select",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("select/tree-view/tree-view.html",'<div class="x1-select x1-select-tree" ng-class="{\'x1-select-sm\': size===\'small\', \'x1-select-lg\': size===\'large\'}"><div role="combobox" class="btn-group" dropdown="" ng-class="{\'btn-group-sm\': size===\'small\', \'btn-group-lg\': size===\'large\'}"><button role="button" type="button" class="btn dropdown-toggle" dropdown-toggle="" ng-class="{\'btn-default\': theme===\'default\', \'btn-secondary\': theme===\'primary\'}"><em ng-if="!selectedItem" class="select-placeholder pull-left">{{placeholder}}</em> <span ng-if="selectedItem" class="list-option pull-left">{{selectedItem.displayName || selectedItem.name}}</span></button><x1-select-tree selected-items="treeSelectedItem" items="selectOptions" config="config" state-helper="treeStateHelper"></x1-select-tree></div></div>')}])}();